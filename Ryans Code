setSize(1280,720);


// Global vars
var character;
var characterhp = 100;
var CollisionObjects = []; // Array that contains all objects you can collide with.
var GravityEffectors = []; // Put things in here that you want to apply gravity to.
var CreatureHolder = []; // hold creature data
var CreatureHitbox = []; // hold creature hitboxes

function LoadCharacter(x, y, image){ // Loads the character at the X and Y pos
    character = new WebImage(image);
    character.setSize(50, 50);
    character.setPosition(x, y);
    character.setColor(Color.blue);
    add(character);
}
LoadCharacter(10, 10, "https://cdn1.medicalnewstoday.com/content/images/articles/322/322868/golden-retriever-puppy.jpg");

    


function Creature(positionX, positionY, sizeX, sizeY, attackspeed, attackrange, damage, movestep, health, detectrange, image){ // this function works basically like a class
    this.CreatureData = new Object();
    
    
    this.CreatureData["AttackSpeed"] = attackspeed; // how many mil seconds it takes to do damage again
    this.CreatureData["AttackRange"] = attackrange;
    this.CreatureData["Damage"] = damage;
    this.CreatureData["MoveStep"] = movestep;
    this.CreatureData["Health"] = health;
    this.CreatureData["DetectRange"] = detectrange;
    this.CreatureData["Hitbox"] = new WebImage(image);
    this.CreatureData["Hitbox"].setSize(sizeX, sizeY);
    this.CreatureData["Hitbox"].setPosition(positionX, positionY);
    add(this.CreatureData["Hitbox"]);
    
    this.CreatureData["Hitbox"].setColor(Color.red);
    giveGravity(this.CreatureData["Hitbox"]);
    
    this.PrintCreature = function(type){
        println("Creature");
        // spawn creature of type
    }  
    println(this.CreatureData["Hitbox"].getX());

    this.Spawn = function(x, y){
        
    }
    
    this.Die = function(creature2){
        print("die");
        for(var i = 0; i < CreatureHolder.length; i++){
            if(CreatureHolder[i].CreatureData["Health"] <= 0){
                print("equals i");
                remove(CreatureHolder[i].CreatureData["Hitbox"]);
                CreatureHolder.remove(i);
                CreatureHitbox.remove(i);
            }
        }    
    }
    println(this.CreatureData["Hitbox"].getX());
    chasey(this.CreatureData["Hitbox"], this.CreatureData["DetectRange"], this.CreatureData["MoveStep"], this.CreatureData["AttackSpeed"]);
    
    function chasey(a,b,c, attackspeed){
        
        function callChase(){
            aiChase(a,b,c);
        }
        setTimer(callChase, 1);
    }

    
}


var newcreature = new Creature(0, 0, 100, 100, 80, 200, 10, 2, 100, 400, "https://www.petmd.com/sites/default/files/Acute-Dog-Diarrhea-47066074.jpg"); //make a new creature (standard creature stats, useful if confused and don't want to spend time configuring)
newcreature.PrintCreature();
CreatureHolder.push(newcreature);


var attackcounter = 0;
function Attack(){ // creatures attack
    //println(newcreature.CreatureData["Hitbox"].getX());
   // println("attack");
    for(var i = 0; i < CreatureHolder.length; i++){
        if(Math.abs(character.getX() - CreatureHolder[i].CreatureData["Hitbox"].getX()) < CreatureHolder[i].CreatureData["AttackRange"]){
            if(Math.abs(character.getY() - CreatureHolder[i].CreatureData["Hitbox"].getY()) < CreatureHolder[i].CreatureData["AttackRange"]){
                attackcounter = attackcounter + 1;
                //println("inside");
                if(attackcounter == CreatureHolder[i].CreatureData["AttackSpeed"]){
                    
                    attackcounter = 0;
                    characterhp = characterhp - CreatureHolder[i].CreatureData["Damage"]
                    // MATTHEW, DISPLAY HEALTH HERE
                    if(characterhp <= 0){
                        var endgame = new Rectangle(getWidth(), getHeight()); // death screen
                        add(endgame);
                        remove(character);
                    }
                    println("CHAR DAMAGE TAKEN: (HP) = " + characterhp); 
                }
             
            }
        }
    }
}
    
function Wait(time){ 
   // setTimer();     
}





// Character vars:
var movingRight = false;
var movingLeft = false;
var jumping = false;

function giveGravity(object){ // check if colliding with character so it doesnt change pos
    var increment = 0;
    
    function Gravity(){
        //println(newcreature.base.getY());
        if(!getCollider(object)){
            if(object == character){
                if(!jumping){
                    increment = increment + 1; // constantly add to the increment to simulate weight - falling faster and faster as time falling increases
                    object.setPosition(object.getX(), object.getY() + increment);
                }
            }else{
                
                increment = increment + 1; // constantly add to the increment to simulate weight - falling faster and faster as time falling increases
                object.setPosition(object.getX(), object.getY() + increment);
            }
        }else{
            var passthrough = true;
            for(var i = 0; i < CreatureHolder.length; i++){
                if(CreatureHolder[i].CreatureData["Hitbox"] == object && getCollider(object) == character){
                    passthrough = false
                }
            }
            if(passthrough){
                increment = 0;
                object.setPosition(object.getX(), getCollider(object).getY() - object.getHeight());
            }
           // }else{
               // increment = 0;
               // object.setPosition(object.getX(), getCollider(object).getY() - object.getHeight()); 
           // }
        }
    }

    setTimer(Gravity, 1);

}







var touchingGround = false;
var jumpIncrement = 20;

    function MoveRight(){
       //if(!movingLeft){
            
                
            
            character.setPosition(character.getX() + 4, character.getY());
       
       //}
    }
    
    
        function MoveLeft(){
      // if(!movingRight){
            character.setPosition(character.getX() - 4, character.getY());
       // }
    }
    
    
function CharacterHandler(){ // classy thing kind of pointless - may be useful later so i made it
    
    this.Swing = function(){
        println("swing");
        for(var i = 0; i < CreatureHolder.length; i++){
            println("loop");
            println(CreatureHolder[i].CreatureData["Hitbox"].getX());
            //println(CreatureHolder[i].CreatureData["Health"]);println(CreatureHolder[i].CreatureData["Health"]);println(CreatureHolder[i].CreatureData["Health"]);
            if(Math.abs(character.getX() - CreatureHolder[i].CreatureData["Hitbox"].getX()) < 500){
               // println("workedddddddd");
                CreatureHolder[i].CreatureData["Health"] = CreatureHolder[i].CreatureData["Health"] - characterDamage
                println("HIT: " + CreatureHolder[i].CreatureData["Health"]);
                if(CreatureHolder[i].CreatureData["Health"] <= 0){
                    println("rundie");
                    CreatureHolder[i].Die();
                }
            }
        }
    }
    
    this.Jump = function(){
        
        println("Jump");
        
        jumping = true;
        if(jumpIncrement > 0){
            jumpIncrement = jumpIncrement - 1;
            character.setPosition(character.getX(), character.getY() - jumpIncrement);
        }else{
            stopTimer(charHandler.Jump);
            jumping = false;
            jumpIncrement = 20;
        }
        
    }
    

    
    function checkGround(){
        if(getCollider(character)){
            touchingGround = true;
        }else{
            touchingGround = false;
        }
    }
    setTimer(checkGround, 1);
    print("ran");
    
}

var characterDamage = 10;

var charHandler = new CharacterHandler();

function getCollider(something){ // If something collides with something, return which corner collided
    var topLeft = getElementAt(something.getX() - 1, something.getY() - 1)
    if(topLeft != null){
        return topLeft;
    }
    
    var topRight = getElementAt(something.getX() + something.getWidth() + 1, something.getY() - 1)
    if(topRight != null){
        return topRight;
    }
    
    var bottomLeft = getElementAt(something.getX() - 1, something.getY() + something.getHeight() - 1)
    if(bottomLeft != null){
        return bottomLeft;
    }
    
    var bottomRight = getElementAt(something.getX() + something.getWidth() + 1, something.getY() + something.getHeight() + 1)
    if(bottomRight != null){
      //  var rect = new Rectangle(10,10);
       // rect.setColor(Color.red);
       // rect.setPosition(bottomRight.getX(), bottomRight.getY());
       // add(rect);
        return bottomRight;
    }

    return null;
}

giveGravity(character);


function LoadMap(maptype){
    if(maptype == "Map1"){
        var background = new Rectangle(getWidth(), getHeight());
        
        var ground = new Rectangle(getWidth(), 50);
        ground.setPosition(0, getHeight() - ground.getHeight());
        ground.setColor(Color.black);
        add(ground);
        
        CollisionObjects.push(ground);
        
        var ground2 = new Rectangle(200, 50);
        ground2.setPosition(1100, 500);
        ground2.setColor(Color.black);
        add(ground2);
        
        CollisionObjects.push(ground2);
        
        var ground3 = new Rectangle(200, 50);
        ground3.setPosition(850, 300);
        ground3.setColor(Color.black);
        add(ground3);
        
        CollisionObjects.push(ground3);
    }
}




//giveGravity(AI);


var a = false;
function keyDown(e){
    if(e.keyCode == Keyboard.letter('D') && !movingRight){
        movingRight = true;
        stopTimer(MoveLeft);
        setTimer(MoveRight, 1);
       
    
    }
    
    if(e.keyCode == Keyboard.letter('A') && !movingLeft){
        movingLeft = true;
        
        stopTimer(MoveRight);
        setTimer(MoveLeft, 1);

        }
        
    if(e.keyCode == Keyboard.SPACE && !jumping){
        print(charHandler.touchingGround);
        if(touchingGround){
            setTimer(charHandler.Jump, 1);
        }
    }
}
keyDownMethod(keyDown);


function keyUp(e){
    println("keyup");
    if(e.keyCode == Keyboard.letter('D')){
        movingRight = false;
        a = true;
        println(a);
        print("stopright");
        stopTimer(MoveRight); 
       
    }
    
    if(e.keyCode == Keyboard.letter('A')){
        movingLeft = false;
        a = true;
        println(a);
        print("stopleft");
        stopTimer(MoveLeft); 
    }
    
}
keyUpMethod(keyUp);

function mouseClick(e){
    print("click");
    charHandler.Swing();
}
mouseClickMethod(mouseClick);

function mouseMove(e){
    
}
mouseMoveMethod(mouseMove);

//AI chase player when certain distance away
function aiChase(enemy, distance, speed){
    var playerToAI = enemy.getX() - character.getX();
    if(playerToAI < 0){
        playerToAI *= -1;
    }
    if(playerToAI < distance){
        if(enemy.getX() < character.getX()){
            enemy.setPosition(enemy.getX() + speed, enemy.getY());
        }else{
            enemy.setPosition(enemy.getX() - speed, enemy.getY());
        }
    }
}

var level = 0;
function changeScene(x, y){
    var end = new Rectangle(50, 25);
    end.setPosition(x, y);
    end.setColor(Color.green);
    
    add(end)
    CollisionObjects.push[end];
    level = level + 1;
    return getCollider(end);
}
changeScene(850, 275);

LoadMap("Map1");
setTimer(Attack, 1); // calls the attack timer so it constantly checks to see if player is near enemy, if so do damage
